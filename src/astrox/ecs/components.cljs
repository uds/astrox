(ns astrox.ecs.components
  "ECS component definitions.
   Each component is represented as a record that defines a specific trait of an ECS entity."
  (:require [clojure.spec.alpha :as s]
            [tails.math.vector2d :as v]
            [tails.math.physics :as p]
            [tails.pixi.core :as px]))



;; -------------------------------------------------------------------------------------------------------
;; Player


;; Marks an entity to be controlled by the player.
;; Typically, there is only one player entity in the game.
(defrecord Player [])


;; -------------------------------------------------------------------------------------------------------
;; View


(s/fdef ->View :args (s/cat :view ::view) :ret map?)
(s/def ::view ::px/object)

;; Represents the visual aspect of a character.
;; The "view" field is a PIXI display object.
(defrecord View [view])


;; -------------------------------------------------------------------------------------------------------
;; Health


(s/fdef ->Health :args (s/cat :health number?, :max-health ::max-health), :ret map?)
(s/def ::max-health number?)

(defrecord Health [health max-health])


;; -------------------------------------------------------------------------------------------------------
;; Rigid body


;; Component for characters controlled by physics.
;; Reference: https://gamedevelopment.tutsplus.com/series/how-to-create-a-custom-physics-engine--gamedev-12715
;;
;; - Position and velocity are 2D vectors (x, y).
;; - Orientation and angular velocity are scalar numbers.
;; - The 0 orientation is when the game object points down (toward the bottom of the screen, along the positive Y axis).
;; - Orientation is incremented counter-clockwise; a 90-degree turn points the object to the left.
(defrecord RigidBody [position                  ;; character position; 2D vector
                      orientation               ;; Character orientation; scalar in radians, changes counter-clockwise relative to y-axis

                      ;; velocity
                      velocity                  ;; Character linear velocity; 2D vector
                      angular-velocity          ;; Character angular velocity; scalar in radians 

                      ;; force
                      force                     ;; Linear force applied to the character; 2D vector 
                      torque                    ;; Angular force applied to the character; scalar 

                      ;; mass
                      inverse-mass              ;; 1/mass in kg; Scalar, default is 1
                      inverse-inertia           ;; 1/inertia; Scalar, default is 1

                      ;; material
                      density                   ;; Density of the material; mass = density * volume; 
                      restitution               ;; "Bounciness" of the material

                      ;; damping
                      ;; (see https://github.com/jonpena/Cirobb/blob/06e36c514bcfdceb172557f6e1ab41e91752f479/cirobb/Scene.cpp#L103)  
                      linear-damping            ;; an amount detracted from the velocity on each physics step; range [0..1], default is 0
                      angular-damping           ;; an amount detracted from the angular velocity on each physics step; range [0..1], default is 0

                      ;; collision
                      collider                  ;; optional collider information; map with :collider-shape, :size, :size-aabb (recomputed) fields 
                      ])


(s/fdef new-rigid-body :args (s/cat :fields ::p/rigid-body) :ret ::p/rigid-body)


(defn new-rigid-body
  "Creates a new instance of the RigidBody record. 
   Prefer using this constructor over the ones generated by RigidBody defrecord
   as it provides default values and spec-checks input values."
  [fields]
  (->>
   (merge {:position         v/zero
           :orientation      0
           :velocity         v/zero
           :angular-velocity 0
           :force            v/zero
           :torque           0
           :inverse-mass     1
           :inverse-inertia  1
           :density          0
           :restitution      0
           :linear-damping   0      ;; range [0..1]
           :angular-damping  0      ;; range [0..1]
           }
          fields)
   (map->RigidBody)))


