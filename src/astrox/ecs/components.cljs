(ns astrox.ecs.components
  "ECS component definitions. 
   The component is represented as a record that defines a specific trait of the ECS entity."
  (:require [clojure.spec.alpha :as s]
            [tails.math.vector2d :as v]
            [tails.math.physics :as p]
            [tails.pixi.core :as px]))



;; -------------------------------------------------------------------------------------------------------
;; Player


;; This component is used to mark an entity to be controlled by the player.
;; Usually there is only one player entity in the game.
(defrecord Player [])


;; -------------------------------------------------------------------------------------------------------
;; View


(s/fdef ->View :args (s/cat :view ::view) :ret map?)
(s/def ::view ::px/object)

;; Visual representation of the character. The "view" field is a PIXI display object.
(defrecord View [view])


;; -------------------------------------------------------------------------------------------------------
;; Health


(s/fdef ->Health :args (s/cat :health number?, :max-health ::max-health), :ret map?)
(s/def ::max-health number?)

(defrecord Health [health max-health])


;; -------------------------------------------------------------------------------------------------------
;; Rigid body


;; A component to be used by a character that is controlled by physics.
;; See https://gamedevelopment.tutsplus.com/series/how-to-create-a-custom-physics-engine--gamedev-12715
;;
;; Position and velocity are 2D vectors (x,y), orientation and angular velocity are scalar numbers.
;; The 0 orientation is when the game object points down (toward bottom of the screen, along positive Y axis)
;; The orientation is incremented counter-clockwise, so a 90 degree turn is when the object points to the left.
(defrecord RigidBody [position                  ;; character position; 2D vector
                      orientation               ;; character orientation; scalar in radians, changes counter clock wise relative to y-axis

                      ;; velocity
                      velocity                  ;; character linear velocity; 2D vector
                      angular-velocity          ;; character angular velocity; scalar in radians 

                      ;; force
                      force                     ;; linear force applied to the character; 2D vector 
                      torque                    ;; angular force applied to the character; scalar 

                      ;; mass
                      inverse-mass              ;; 1/mass in kg; scalar, default is 1
                      inverse-inertia           ;; 1/inertia; scalar, default is 1

                      ;; material
                      density                   ;; density of the material; mass = density * volume; 
                      restitution               ;; "bounciness" of the material

                      ;; damping
                      ;; (see https://github.com/jonpena/Cirobb/blob/06e36c514bcfdceb172557f6e1ab41e91752f479/cirobb/Scene.cpp#L103)  
                      linear-damping            ;; an amount detracted from the velocity on each physics step; range [0..1], default is 0
                      angular-damping              ;; an amount detracted from the angular velocity on each physics step; range [0..1], default is 0.02
                      ])


(s/fdef new-rigid-body :args (s/cat :fields ::p/rigid-body) :ret ::p/rigid-body)


(defn new-rigid-body
  "Creates a new instance of the RigidBody record. 
   Prefer to use this constructor over the ones generated by RigidBody defrecord 
   as it provides defaults spec-checks input values."
  [fields]
  (->>
   (merge {:position         v/zero
           :orientation      0
           :velocity         v/zero
           :angular-velocity 0
           :force            v/zero
           :torque           0
           :inverse-mass     1
           :inverse-inertia  1
           :density          0
           :restitution      0
           :linear-damping   0      ;; range [0..1]
           :angular-damping  0}     ;; range [0..1]
           
          fields)
   (map->RigidBody)))


;; -------------------------------------------------------------------------------------------------------
;; Collider


(s/def ::position ::v/vector2d)
(s/def ::size ::v/vector2d)
(s/def ::shape #{:circle :rectangle})

(s/fdef ->Collider :args (s/cat :position ::position :size ::size :shape ::shape) :ret map?)

(s/def ::collider (s/with-gen
                    #(satisfies? Collider %)
                    #(s/gen #{(->Collider v/zero v/zero :circle)})))
(defrecord Collider [local-position  ;; local position of the collider, relative to the character's position; 2D vector
                     size            ;; size of the collider; 2D vector
                     shape])         ;; shape of the collider; e.g., :circle, :rectangle
